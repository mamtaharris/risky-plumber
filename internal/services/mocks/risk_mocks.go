// Code generated by MockGen. DO NOT EDIT.
// Source: risk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	requests "github.com/mamtaharris/risky-plumber/internal/models/requests"
	responses "github.com/mamtaharris/risky-plumber/internal/models/responses"
)

// MockRiskService is a mock of RiskService interface.
type MockRiskService struct {
	ctrl     *gomock.Controller
	recorder *MockRiskServiceMockRecorder
}

// MockRiskServiceMockRecorder is the mock recorder for MockRiskService.
type MockRiskServiceMockRecorder struct {
	mock *MockRiskService
}

// NewMockRiskService creates a new mock instance.
func NewMockRiskService(ctrl *gomock.Controller) *MockRiskService {
	mock := &MockRiskService{ctrl: ctrl}
	mock.recorder = &MockRiskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRiskService) EXPECT() *MockRiskServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRiskService) Create(ctx context.Context, riskReq requests.RiskReq) (responses.RiskResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, riskReq)
	ret0, _ := ret[0].(responses.RiskResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRiskServiceMockRecorder) Create(ctx, riskReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRiskService)(nil).Create), ctx, riskReq)
}

// GetAll mocks base method.
func (m *MockRiskService) GetAll(ctx context.Context, paginationReq requests.PaginationReq) ([]responses.RiskResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, paginationReq)
	ret0, _ := ret[0].([]responses.RiskResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRiskServiceMockRecorder) GetAll(ctx, paginationReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRiskService)(nil).GetAll), ctx, paginationReq)
}

// GetByID mocks base method.
func (m *MockRiskService) GetByID(ctx context.Context, id uuid.UUID) (responses.RiskResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(responses.RiskResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRiskServiceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRiskService)(nil).GetByID), ctx, id)
}
